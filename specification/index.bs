<pre class='metadata'>
Title: Web Extensions
Shortname: webextensions
Level: 1
Status: w3c/CG-DRAFT
Group: WECG
URL: https://w3c.github.io/webextensions
Editor: Mukul Purohit, Microsoft Corporation https://www.microsoft.com, mpurohit@microsoft.com
Editor: Tomislav Jovanovic, Mozilla https://www.mozilla.org/, tjovanovic@mozilla.com
Editor: Oliver Dunk, Google https://www.google.com, oliverdunk@chromium.org
Abstract: [Placeholder] Abstract.
Markup Shorthands: markdown yes
</pre>

## File structure

Once unpacked from the distribution format, a WebExtension is a directory containing a number of files.

Note: In some operating systems, filenames are case insensitive. This can lead to naming collisions.

### manifest.json

A <a href="#manifest">Manifest</a> file.

### _locales subdirectory

An optional directory containing strings as defined in <a href="#localization">localization</a>.

### Other files

An extension may also contain other files, such as those referenced in the [[#key-content_scripts]] and [[#key-background]] part of the [=manifest=].

## Manifest

A WebExtension must have a <dfn>manifest</dfn> file at its root directory.

### Manifest file

A manifest file is a [[!JSON]] document named `manifest.json`. Malformed JSON files are not supported.

### Manifest keys

If manifest keys that are not defined in this specification are specified, implementors must ignore those keys.

If manifest keys that are defined in this specification are specified with a different JSON type than defined in this specification, implementors must ignore those keys.

The following keys must be considered valid:

* <a href="#key-manifest_version">`manifest_version`</a>: required.
* <a href="#key-name">`name`</a>: required.
* <a href="#key-version">`version`</a>: required.
* <a href="#key-default_locale">`default_locale`</a>: required under some conditions.
* <a href="#key-background">`background`</a>: optional
* <a href="#key-commands">`commands`</a>: optional
* <a href="#key-content_scripts">`content_scripts`</a>: optional
* <a href="#key-content_security_policy">`content_security_policy`</a>: optional
* <a href="#key-description">`description`</a>: optional
* <a href="#key-icons">`icons`</a>: optional
* <a href="#key-optional_permissions">`optional_permissions`</a>: optional
* <a href="#key-options_ui">`options_ui`</a>: optional
* <a href="#key-permissions">`permissions`</a>: optional
* <a href="#key-short_name">`short_name`</a>: optional
* <a href="#key-web_accessible_resources">`web_accessible_resources`</a>: optional
* <a href="#key-devtools_page">`devtools_page`</a>: optional
* <a href="#key-externally_connectable">`externally_connectable`</a>: optional

The following keys must be considered valid in Manifest V3:

* <a href="#key-host_permissions">`host_permissions`</a>: optional
* <a href="#key-optional_host_permissions">`optional_host_permissions`</a>: optional

#### Key `manifest_version`

This key must be present.

#### Key `name`

Name of the extension used in the browserâ€™s user interface. This should be the full name used to identify the extension. See also <a href="#key-short_name">`short_name`</a>.

This key must be present. This property can be localized.

#### Key `version`

This key must be present.

#### Key `permissions`

This key may be present.

#### Key `optional_permissions`

This key may be present.

#### Key `host_permissions`

This key may be present.

#### Key `optional_host_permissions`

This key may be present.

#### Key `default_locale`

This key must be present if the `_locales` subdirectory is present, must be absent otherwise.

#### Key `background`

This key may be present.

#### Key `commands`

This key may be present.

#### Key `content_scripts`

The <a href="#key-content_scripts">`content_scripts`</a> key is a [=list=] of items representing [=content scripts=] that should be registered.

#### Key `content_security_policy`

This key may be present.

#### Key `description`

This key may be present.

#### Key `icons`

This key may be present.

#### Key `options_ui`

This key may be present.

#### Key `short_name`

The short name of the extension. This value should be used in contexts where <a href="#key-name">`name`</a> is too long to use in full. If `short_name` is not provided, manifest consumers should use a truncated version of `name`.

This key may be present. This property can be localized.

#### Key `web_accessible_resources`

This key may be present.

#### Key `externally_connectable`

This key may be present.

#### Key `devtools_page`

This key may be present.

### Reserved file names

Filenames beginning with an underscore (`_`) are reserved for use by user agent.

## Isolated worlds

<dfn>Worlds</dfn> are isolated JavaScript contexts with access to the same underlying DOM tree but their own set of wrappers around those DOM objects.

## Unavailable APIs

## The `browser` global

## Extension origin

## Localization

The _locales subdirectory of a WebExtension can contain strings for internationalization purposes.

Issue(62): Specify localization handling.

## Host permissions

### Cross-origin fetch

## Match patterns

A <dfn>match pattern</dfn> is a pattern used to match URLs.

## Globs

A <dfn>glob</dfn> can be any [=string=]. It can contain any number of wildcards where * can match zero or more characters and ? matches exactly one character.

## Concepts

### Uniqueness of extension IDs

### Promises and callbacks

### User gestures and activeTab

### Extension permissions and web perissions

## Content security policy

## Architecture

### Background content

### Content scripts

<dfn>Content scripts</dfn> represent a set of JS and CSS files that should be injected into pages loaded by the user agent.

#### Key `matches`

A [=list=] of [=match patterns=] that are used to decide where the content script runs. This key is required.

#### Key `exclude_matches`

A [=list=] of [=match patterns=] that should be used to exclude URLs from where the content script runs.

#### Key `js`

A [=list=] of file paths that should be injected as scripts.

#### Key `css`

A [=list=] of file paths that should be injected as stylesheets.

#### Key `all_frames`

If `all_frames` is true, the content script must be injected into subframes. Defaults to false.

#### Key `match_about_blank`

If this is `true`, the content script will also be injected into an additional user agent specified set of pages used to represent empty frames. This will only happen if the content script matches the page that embedded the frame. Defaults to `false`.

#### Key `match_origin_as_fallback`

Used to match frames with an opaque or otherwise missing origin. The origin to match against is determined in the following order of priority:

1. If the frame has an [=opaque origin=], such as with a [=blob URLs=], use the non-opaque origin.
1. If available, use the origin of the parent frame.
1. Otherwise, no origin is found and this frame can never be matched.

#### Key `run_at`

Specifies when the content script should be injected. Valid values are `document_start`, `document_end` and `document_idle`.

#### Key `include_globs`

A list of [=globs=] that a page should match in addition to matches.

#### Key `exclude_globs`

A list of [=globs=] that should be used to exclude URLs from where the content script runs.

#### Key `world`

The [=world=] any JavaScript scripts should be injected into. Defaults to `ISOLATED`. Valid values are `MAIN` and `ISOLATED`.

#### Injecting a content script

Issue: If the same extension specifies the same script twice, what should happen? ([bug](https://crbug.com/324096753))

Issue: The below algorithm needs to be updated to include `match_about_blank` and `match_origin_as_fallback`.

To determine if a content script should be injected in a frame:

1. If the extension does not have access to the origin, return.
1. If the origin is not included in `matches`, return.
1. If `include_globs` is present and the origin is not matched, return.
1. If the origin matches an entry in `exclude_matches` or `exclude_globs`, return.
1. If this is a frame, and `all_frames` is not `true`, return.
1. Otherwise, inject the content script. This should be done based on the `run_at` setting.

### Extension pages

## Classes of security risk

## Web accessible resources

## Interaction with the web

### Current behavior of cookie partitioning

## Version number handling
